/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control.
 * - Users can only read or modify their own user documents.
 * - Portfolio data is publicly readable, but only administrators can modify it.
 * - Portfolio projects are publicly readable, but only administrators can create, update, or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /portfolio/main: Stores the main portfolio data, publicly readable.  This is a single document.
 * - /projects/{projectId}: Stores portfolio projects, publicly readable.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied.
 * - Portfolio and project data is publicly readable to allow for easy display.
 *
 * Denormalization for Authorization:
 *  - No denormalization is required at this stage.  The assumption is that `portfolio/main` is a single publicly accessible document.  If it were instead user-specific, an `ownerId` field would need to be added.
 *
 * Structural Segregation:
 * - Public content (portfolio, projects) is stored in top-level collections, separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the user document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the user document, and that the resource exists
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the request is made by the owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own document.
     * @allow (get, update, delete) Signed-in user accesses their own document.
     * @deny (create) Signed-in user attempts to create a document with a mismatched userId.
     * @deny (get, update, delete) Signed-in user attempts to access another user's document.
     * @deny (list) Any user attempts to list all user documents.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the main portfolio document.
     * @path /portfolio/main
     * @allow (get, list) Any user can read the portfolio data.
     * @deny (create, update, delete) No one can create, update, or delete the portfolio data (admin role missing).
     * @principle Public read, owner-only writes (currently disabled due to missing owner/admin concept).
     */
    match /portfolio/{portfolioId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field and admin role added.
    }

    /**
     * @description Rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read the project data.
     * @deny (create, update, delete) No one can create, update, or delete projects (admin role missing).
     * @principle Public read, owner-only writes (currently disabled due to missing owner/admin concept).
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field and admin role added.
    }
  }
}