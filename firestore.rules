/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to portfolio and project data, and restricts
 * access to contact submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, only accessible by the user.
 * - /portfolio/{portfolioId}: Stores the main portfolio data, publicly readable.
 * - /projects/{projectId}: Stores individual portfolio projects, publicly readable.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions, only accessible to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Portfolio and project data is publicly readable.
 * - Listing of users is disallowed for privacy.
 * - Contact form submissions are only accessible to authenticated users.
 *
 * Denormalization for Authorization:
 *  N/A - This ruleset does not require denormalization.
 *
 * Structural Segregation:
 *  N/A - This ruleset does not use structural segregation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if authenticated as 'abc'.
     * @allow (get, update, delete) - User 'abc' can read/update/delete their profile if authenticated as 'abc'.
     * @deny (create, get, update, delete) - User 'xyz' cannot access user 'abc''s profile data.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for portfolio data.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Any user can read portfolio data.
     * @deny (create, update, delete) - No user can create, update, or delete portfolio data.
     * @principle Allows public read access with no write access.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for project data.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @deny (create, update, delete) - No user can create, update, or delete project data.
     * @principle Allows public read access with no write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (create) - Any authenticated user can create a contact submission.
     * @allow (get, list) - Any authenticated user can read/list contact submissions.
     * @deny (update, delete) - No user can update or delete contact submissions.
     * @principle Restricts access to authenticated users only.
     */
    match /contactSubmissions/{submissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}