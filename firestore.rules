/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model with an emphasis on ownership and explicit permissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /portfolio/{portfolioId}: Stores the main portfolio data, publicly accessible for reads, owner-only writes.
 * - /projects/{projectId}: Stores individual portfolio projects, publicly accessible for reads, owner-only writes.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions, accessible only with authenticated users for reads and writes.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Portfolio and project data are publicly readable but only editable by authenticated users.
 * - Contact form submissions can be only updated by authenticated users, specifically the `isRead` field.
 *
 * Denormalization for Authorization:
 * - The portfolio and project entities do not have explicit ownership fields. Therefore the auth checks will be based on user authentication.
 * - Contact Submissions can be marked as `isRead` by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - User can only access their own profile data.
     * @deny (create) - User cannot create a profile with a different userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for portfolio data.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Anyone can read portfolio data.
     * @allow (create, update, delete) - Only authenticated users can modify portfolio data.
     * @deny (create, update, delete) - Unauthenticated users cannot modify portfolio data.
     * @principle Public read, owner-only writes for portfolio data.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Rules for project data.
     * @path /projects/{projectId}
     * @allow (get, list) - Anyone can read project data.
     * @allow (create, update, delete) - Only authenticated users can modify project data.
     * @deny (create, update, delete) - Unauthenticated users cannot modify project data.
     * @principle Public read, owner-only writes for project data.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (get, list) - Only authenticated users can read contact form submissions.
     * @allow (create) - Anyone can create a contact form submission.
     * @allow (update) - Only authenticated users can update the `isRead` field.
     * @deny (update) - Prevent changing any fields other than `isRead`.
     * @deny (delete) - No one can delete contact submissions.
     * @principle Authenticated access for reading and updating submissions.
     */
    match /contactSubmissions/{submissionId} {
        allow get, list: if isSignedIn();
        allow create: if true;
        allow update: if isSignedIn() && request.resource.data.keys().hasOnly(['isRead']) && resource.data.isRead != request.resource.data.isRead;
        allow delete: if false;
    }
  }
}