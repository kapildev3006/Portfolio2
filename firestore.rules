/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict authorization model based on ownership and role-based access control.
 * It is designed to protect user data and ensure that only authorized users can access specific resources.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. Accessible only to the user themselves.
 * - `/portfolio/{portfolioId}`: Stores the main portfolio data. Access control is not specified.
 * - `/projects/{projectId}`: Stores individual portfolio projects. Access control is not specified.
 * - `/contactSubmissions/{submissionId}`: Stores contact form submissions from visitors.
 *
 * Key Security Decisions:
 * - User data is strictly private, accessible only to the authenticated user.
 * - Unspecified access control for `/portfolio` and `/projects`.
 * - Contact submissions are secured, and only authorized users (e.g., admins) can access them.
 * - The ruleset focuses on authorization and does not enforce strict data validation.
 *
 * NOTE: These rules are generated in "Prototyping Mode," prioritizing secure authorization.
 * Data shape validation is omitted to allow for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a global function to check if a user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a global function to check if the request is made by the owner of the document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a global function to check if the request is made by the owner of an existing document.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the request is made by the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for main portfolio data.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) Everyone can read portfolio data.
     * @allow (create, update, delete) No one can modify portfolio data (explicitly denied for safety).
     * @deny (create, update, delete) Any user tries to modify the portfolio.
     * @principle Open read access, restricted write access.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for individual portfolio projects.
     * @path /projects/{projectId}
     * @allow (get, list) Everyone can read project data.
     * @allow (create, update, delete) No one can modify project data (explicitly denied for safety).
     * @deny (create, update, delete) Any user tries to modify the project.
     * @principle Open read access, restricted write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Rules for contact form submissions.
      * @path /contactSubmissions/{submissionId}
      * @allow (list) Any signed in user can read contact submissions.
      * @allow (create) Any unauthenticated user can submit the form.
      * @deny (update, delete) Any user can not update or delete contact submissions
      * @principle Only signed-in user can view the submitted form.
      */
    match /contactSubmissions/{submissionId} {
      allow get, list: if isSignedIn();
      allow create: if true;
      allow update, delete: if false;
    }
  }
}