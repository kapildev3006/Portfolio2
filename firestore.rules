/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to projects
 * while restricting project creation, updates, and deletion to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only by the user themselves.
 * - /projects/{projectId}: Stores portfolio projects. Read access is public, but writes are restricted to
 *   authenticated users.
 * - /portfolio/{portfolioId}: Stores the main portfolio data document. Write access restricted to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Project listing is public.
 * - Only authenticated users can create, update, or delete projects.
 * - The rules do NOT enforce strict schema validation to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, ensuring only the user can read/write their data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching userId.
     * @deny (get, create, update, delete) - Any other user or unauthenticated user.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures portfolio data, allowing only authenticated users to manage portfolio data
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Authenticated users
     * @allow (create, update, delete) - Authenticated users
     * @deny (create, update, delete) - Unauthenticated users
     * @principle Restricts portfolio management to authenticated users
     */
    match /portfolio/{portfolioId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures portfolio projects, allowing public read access but restricting write access to authenticated users.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user (publicly accessible).
     * @allow (create) - Authenticated user, only if the request includes an "ownerId" field matching their UID.
     * @allow (update, delete) - Authenticated user who is the owner of the project.
     * @deny (create, update, delete) - Unauthenticated users.
     * @deny (create) - Authenticated user, if the ownerId field is missing or doesn't match their UID.
     * @principle Allows public reads, enforces owner-only writes for projects.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}