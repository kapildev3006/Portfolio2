/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a public-read, owner-write model for portfolio data,
 * restricts user data access to the owner, and allows public reads for individual projects.
 * Contact form submissions are publicly writeable, to be read by owners only.
 *
 * Data Structure:
 * - /portfolio/{portfolioId}: Stores the main portfolio data. Currently only one document at "main"
 * - /users/{userId}: Stores user profile information.
 * - /projects/{projectId}: Stores individual portfolio projects.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions.
 *
 * Key Security Decisions:
 * - Portfolio data is publicly readable to allow anonymous browsing.
 * - Portfolio data can only be modified by an authenticated owner.  There is no owner defined at this time, TODO: Add ownerId field.
 * - User data is strictly private; only the owning user can read or write their profile.
 * - Project data is publicly readable.
 * - Contact submissions are publicly writable, allowing anyone to submit the contact form. TODO: Restrict read access to authorized users or admins only.
 *
 * Denormalization for Authorization:
 *  - The "portfolio" entity needs an "ownerId" field to properly implement owner-only writes.  Without this, it's not possible to securely control who can edit the portfolio data.
 *
 * Structural Segregation:
 *  - There is no segregation of data for public and private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to portfolio data, but restricts writes to the owner (once an owner field is added).
     * @path /portfolio/{portfolioId}
     * @allow (get, list): Any user can read portfolio data.
     * @deny (create, update, delete): No one can modify portfolio data until owner validation is implemented.
     * @principle Public read, owner-only writes.
     */
    match /portfolio/{portfolioId} {
      allow get: if true;
      allow list: if true;

      // CRITICAL: Cannot implement owner-only writes. The 'portfolio' entity is missing an 'ownerId' or 'authorId' field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to user documents to the owning user.
     * @path /users/{userId}
     * @allow (get, list): Only the owner can read their own profile.
     * @allow (create, update, delete): Only the owner can create, update, or delete their own profile.
     * @deny: All other requests are denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to individual projects.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @deny (create, update, delete): No one can create, update, or delete projects.
     * @principle Public read-only data.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a contact submission.
     * @path /contactSubmissions/{submissionId}
     * @allow create: Any user can submit the contact form.
     * @deny get, list, update, delete: Only admin can read or modify form submissions.
     * @principle Open writes for contact submissions, restricted read access.
     */
    match /contactSubmissions/{submissionId} {
        allow create: if true;
        allow get: if false;
        allow list: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the request is authenticated.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the requesting user is the owner of the resource.
   * @param {string} userId The user ID to compare against the request's authentication UID.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the requesting user is the existing owner of the resource.
   * @param {string} userId The user ID to compare against the resource's owner ID.
   * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}