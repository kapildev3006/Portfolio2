/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to projects. Only authenticated users can create, update, or delete projects, and they can only modify their own projects. Portfolio documents have owner-only access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /projects/{projectId}: Stores portfolio projects. Accessible to all for reading, but create/update/delete restricted to the project owner.
 * - /portfolio/{portfolioId}: Stores portfolio data. Accessible only to the user that owns it.
 *
 * Key Security Decisions:
 * - Projects are publicly readable but owner-writable.
 * - User listing is disallowed.
 *
 * Denormalization for Authorization:
 *  The current data model does not contain an explicit `ownerId` or `authorId` field on the `/projects/{projectId}` document. To properly secure write operations, we must add this field to the data model and enforce it in the rules. The `create` rule MUST validate that the incoming `ownerId` matches the user's auth UID. The `update` and `delete` rules MUST validate ownership against the existing document's `ownerId` field.
 *
 * Structural Segregation:
 *  The application uses separate collections for public (projects) and private (users) data. This approach is more secure and performant than using a single collection with a boolean flag.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and that the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId can create their own profile.
     * @allow (get, update, delete) Authenticated user can get, update, delete their own profile.
     * @deny (create) If the userId does not match the authenticated user's ID.
     * @deny (get, update, delete) If the userId does not match the authenticated user's ID.
     * @deny (list) User listing is not allowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rules for portfolio data.
      * @path /portfolio/{portfolioId}
      * @allow (create) Authenticated user with matching portfolioId can create their own portfolio.
      * @allow (get, update, delete) Authenticated user can get, update, delete their own portfolio.
      * @deny (create) If the portfolioId does not match the authenticated user's ID.
      * @deny (get, update, delete) If the portfolioId does not match the authenticated user's ID.
      * @deny (list) Portfolio listing is not allowed.
      * @principle Enforces document ownership for all operations.
      */
    match /portfolio/{portfolioId} {
      allow get: if isOwner(portfolioId);
      allow list: if false;
      allow create: if isOwner(portfolioId);
      allow update: if isExistingOwner(portfolioId);
      allow delete: if isExistingOwner(portfolioId);
    }

    /**
     * @description Rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read the projects.
     * @allow (create) Authenticated users can create projects if the request includes `request.resource.data.ownerId` and it matches their UID.
     * @allow (update, delete) Only the project owner can update or delete projects.
     * @deny (create) If the `ownerId` field is missing or does not match the authenticated user's UID.
     * @deny (update, delete) If the user is not the project owner, or if the project doesn't exist.
     * @principle Public read, owner-only write access to projects.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}