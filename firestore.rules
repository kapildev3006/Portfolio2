/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and portfolio data.
 *  It also restricts access to contact form submissions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /portfolio/{portfolioId}: Stores portfolio data. Currently, all authenticated users can read,
 *   but write access is not granted.
 * - /projects/{projectId}: Stores individual projects, accessible for reading to any authenticated user.
 *   Write access is not granted.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. Only authenticated users
 *   can create submissions, but listing and getting them is denied for all.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Contact submissions are restricted; listing is denied to prevent unauthorized access.
 * - Portfolio and projects are readable by authenticated users, but writes are not yet permitted.
 *
 * Denormalization for Authorization: N/A in this version.
 * Structural Segregation: N/A in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, list) - Authenticated user gets their own profile.
     * @allow (update, delete) - Authenticated user updates/deletes their own profile.
     * @deny (create) - User attempts to create a profile for another user.
     * @deny (get, list) - User attempts to read another user's profile.
     * @deny (update, delete) - User attempts to modify/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio documents.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Any authenticated user can read portfolio data.
     * @deny (create, update, delete) - No one can create, update, or delete portfolio data.
     * @principle Restricts write access while allowing public read access.
     */
    match /portfolio/{portfolioId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) - Any authenticated user can read project data.
     * @deny (create, update, delete) - No one can create, update, or delete project data.
     * @principle Restricts write access while allowing public read access.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (create) - Any authenticated user can create a contact submission.
     * @deny (get, list, update, delete) - No one can list or get contact submissions.
     * @principle Restricts listing of contact submissions for privacy.
     */
    match /contactSubmissions/{submissionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}