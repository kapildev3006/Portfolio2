/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for the /users/{userId} collection
 * and read-only access to the /projects/{projectId} and /portfolio/{portfolioId} collections.
 * Only authenticated users can access data.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Each user can only access their own profile.
 * - /projects/{projectId}: Stores portfolio project data. Publicly readable, but owner-only write access.
 * - /portfolio/{portfolioId}: Stores the main portfolio document. Publicly readable, but owner-only write access.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Anyone can read project and portfolio data, but only owners (identified by an 'ownerId' field) can modify or delete.
 * - Listing users is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 * - The /projects/{projectId} and /portfolio/{portfolioId} documents must contain an `ownerId` field
 *   that matches the UID of the user who created them. This allows for efficient owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create a document at /users/user_abc
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete the document at /users/user_abc
     * @deny (create) - User with UID 'user_xyz' cannot create a document at /users/user_abc
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the document at /users/user_abc
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing users for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to portfolio documents, but restricts write access to the owner.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Any user can read portfolio data.
     * @allow (create) - User with UID 'user_abc' can create a portfolio document if request.resource.data.ownerId == 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update or delete a portfolio document if resource.data.ownerId == 'user_abc' and the document exists.
     * @deny (create) - User with UID 'user_xyz' cannot create a portfolio document with ownerId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete a portfolio document with ownerId 'user_abc'.
     * @principle Allows public read access with owner-only writes, enforced through an 'ownerId' field.
     */
    match /portfolio/{portfolioId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Allows public read access to project documents, but restricts write access to the owner.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @allow (create) - User with UID 'user_abc' can create a project document if request.resource.data.ownerId == 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update or delete a project document if resource.data.ownerId == 'user_abc' and the document exists.
     * @deny (create) - User with UID 'user_xyz' cannot create a project document with ownerId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete a project document with ownerId 'user_abc'.
     * @principle Allows public read access with owner-only writes, enforced through an 'ownerId' field.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
        function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}