/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and allows public read access to portfolio projects.
 * Users can only read and write their own profile data.
 * Portfolio projects are publicly readable but only modifiable by an owner (who must also set their user id as the author of the project).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Each user can only access their own document.
 * - /projects/{projectId}: Stores project data. These are publicly readable, but only the creator can modify them.
 * - /portfolio/{portfolioId}: Stores portfolio data. These are publicly readable, but only the creator can modify them.
 *
 * Key Security Decisions:
 * - Listing users is disallowed.
 * - The `projects` collection is publicly readable, enabling discovery and showcasing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching {userId} can access.
     * @deny (get, create, update, delete) User without matching {userId} cannot access.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to projects, but restricts creation, updates, and deletes to the project creator.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read projects.
     * @allow (create) Only the authenticated user can create a project if they set themselves as the owner
     * @allow (update, delete) Only the project owner can modify/delete.
     * @deny (create) An unauthenticated user attempts to create a project.
     * @deny (update, delete) A user attempts to modify/delete a project they don't own.
     * @principle Provides public read access while enforcing owner-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creatorId);
      allow delete: if isExistingOwner(resource.data.creatorId);
    }

    /**
     * @description Allows public read access to portfolio, but restricts creation, updates, and deletes to the project creator.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) Any user can read portfolio.
     * @allow (create) Only the authenticated user can create a portfolio if they set themselves as the owner
     * @allow (update, delete) Only the portfolio owner can modify/delete.
     * @deny (create) An unauthenticated user attempts to create a portfolio.
     * @deny (update, delete) A user attempts to modify/delete a portfolio they don't own.
     * @principle Provides public read access while enforcing owner-only writes.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creatorId);
      allow delete: if isExistingOwner(resource.data.creatorId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}