/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict ownership-based security model.
 * All data is either publicly readable or restricted to the authenticated user.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, only accessible to the owning user.
 * - /projects/{projectId}: Stores portfolio projects, publicly readable but writable only by the owning user. Requires an `authorId` field.
 * - /portfolio/{portfolioId}: Stores portfolio data, publicly readable but writable only by the owning user.
 *
 * Key Security Decisions:
 * - Public Read, Owner-Only Write: The 'projects' collection implements a "Public Read, Owner-Only Write" access control pattern, where any user can read the data, but only the owner (identified by the `authorId` field in the document) can create, update, or delete it.
 * - User Listing Denied: Listing all users is explicitly denied to protect user privacy.
 * - Default Security Posture: In cases of ambiguity, the rules default to the most restrictive option (e.g., denying access).
 *
 * Denormalization for Authorization:
 *   - The 'projects' collection relies on the 'authorId' field within each document to enforce ownership, avoiding costly `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read projects, but only the owner to create, update, or delete.
     * @path /projects/{projectId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.authorId
     * @allow (update, delete) if request.auth.uid == resource.data.authorId
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @deny (update, delete) if request.auth.uid != resource.data.authorId
     * @principle Enforces public read access with owner-only write access, validating the authorId on create.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.authorId;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read portfolio data, but only the owner to create, update, or delete.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if request.auth.uid == resource.data.authorId
     * @deny (create, update, delete) if request.auth.uid != resource.data.authorId
     * @principle Enforces public read access with owner-only write access.
     */
    match /portfolio/{portfolioId} {
        allow get: if true;
        allow list: if true;
        // TODO: Add owner validation once the schema is updated with an ownership field.
        allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}