/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles.
 * Contact submissions are locked down and inaccessible.
 * All write operations are protected by authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; only accessible to the owner.
 * - /portfolio/{portfolioId}: Stores the main portfolio data document.
 * - /projects/{projectId}: Stores individual portfolio projects.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. These are inaccessible.
 *
 * Key Security Decisions:
 * - User profiles are private; listing all users is disallowed.
 * - Contact submissions are never readable, even by the submitter.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create /users/user123
     * @allow (get, update, delete) User with uid 'user123' can get, update or delete their profile /users/user123.
     * @deny (get, update, delete) User with uid 'user456' cannot get, update or delete /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow the user to create their own profile if the UID matches.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      // Allow the user to read, update, and delete their own profile.
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow list: if false;
    }

    /**
     * @description Rules for the portfolio data document.
     * @path /portfolio/{portfolioId}
     * @allow (get, list): Everyone can read portfolio data.
     * @deny (create, update, delete): No one can create, update, or delete portfolio data.
     * @principle Public read, no writes allowed.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get, list): Everyone can read project data.
     * @deny (create, update, delete): No one can create, update, or delete project data.
     * @principle Public read, no writes allowed.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Secure contact form submissions. No one can read or list submissions.
      * @path /contactSubmissions/{submissionId}
      * @deny (get, list, create, update, delete): No one can perform any operation on contact submissions.
      * @principle Restricts all access to contact submissions.
      */
    match /contactSubmissions/{submissionId} {
      allow get, list, create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}