/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and
 * allows public read access to projects while restricting modifications to authenticated users.
 * Contact form submissions are strictly controlled and only accessible for listing by
 * authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owner.
 * - /projects/{projectId}: Stores portfolio projects. Publicly readable, writeable only by
 *   authenticated users.
 * - /portfolio/{portfolioId}: Stores the main portfolio data. Only writeable by authenticated users.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. Only listable by
 *   authenticated users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Projects are publicly readable to showcase work, but only authenticated users can create,
 *   update, or delete them.
 * - Contact submissions are only listable by authenticated users.
 *
 * Denormalization for Authorization:
 *  - The ruleset relies on the authenticated user's ID (`request.auth.uid`) to match against the
 *    document ID in `/users/{userId}` to enforce ownership.
 *
 * Structural Segregation:
 *  - No explicit structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Rules for portfolio data.
       * @path /portfolio/{portfolioId}
       * @allow (get) Any user can read the portfolio data.
       * @allow (create) Authenticated user can create portfolio data.
       * @allow (update) Authenticated user can update portfolio data.
       * @allow (delete) Authenticated user can delete portfolio data.
       * @deny (create) Anonymous user cannot create portfolio data.
       * @deny (update) Anonymous user cannot update portfolio data.
       * @deny (delete) Anonymous user cannot delete portfolio data.
       * @principle Allows public reads, restricts writes to authenticated users.
       */
    match /portfolio/{portfolioId} {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get) Any user can read a project.
     * @allow (list) Any user can list projects.
     * @allow (create) Authenticated user can create a project.
     * @allow (update) Authenticated user can update a project.
     * @allow (delete) Authenticated user can delete a project.
     * @deny (create) Anonymous user cannot create a project.
     * @deny (update) Anonymous user cannot update a project.
     * @deny (delete) Anonymous user cannot delete a project.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (get) Denied, not supported.
     * @allow (list) Authenticated user can list contact submissions.
     * @allow (create) Always false, handled by function.
     * @allow (update) Always false, handled by function.
     * @allow (delete) Always false, handled by function.
     * @deny (list) Anonymous user cannot list contact submissions.
     * @principle Restricts listing to authenticated users.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if false;
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}