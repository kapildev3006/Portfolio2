/**
 * @fileoverview Firestore Security Rules
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by implementing distinct access control patterns for different data collections.
 * It focuses on owner-only access for user-specific data and admin-only access for contact submissions.
 * To improve performance and simplify rules, data required for authorization (e.g., ownership) is denormalized onto the documents being secured.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; accessible only by the owner.
 * - /portfolio/main: Stores the main portfolio data; only accessible by an admin user.
 * - /projects/{projectId}: Stores portfolio projects; only accessible by an admin user.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions; only accessible by an admin user.
 *
 * Key Security Decisions:
 * - Strict Ownership: Users can only access their own data under /users/{userId}.
 * - Admin-Only Access: Modifying portfolio data and accessing contact submissions requires admin privileges.
 * - No Public Listing: Listing of users and contact submissions is explicitly denied to prevent information disclosure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @example isSignedIn() == true if request.auth != null
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner("someUserId") == (request.auth.uid == "someUserId")
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId and the resource exists
     * @param {string} userId - The user ID to compare against.
     * @example isExistingOwner("someUserId") == (request.auth.uid == "someUserId" && resource != null)
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

        /**
     * @description Checks if the current user is an admin based on their email.
     * @example isAdmin() == (request.auth.token.email == "admin@example.com")
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.email == "admin@example.com";
    }


    /**
     * @description Manages portfolio data. Only admins can read and write to the portfolio document.
     * @path /portfolio/main
     * @allow (update) if request.auth.token.email == "admin@example.com"
     * @deny (update) if request.auth.token.email != "admin@example.com"
     * @principle Restricts portfolio data access to administrators only.
     */
    match /portfolio/{portfolioId} {
      allow get: if true;
      allow list: if false;

      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (get, list) if request.auth.uid == "{userId}"
     * @allow (create, update, delete) if request.auth.uid == "{userId}"
     * @deny (get, list) if request.auth.uid != "{userId}"
     * @deny (create, update, delete) if request.auth.uid != "{userId}"
     * @principle Enforces document ownership for user profiles, restricting access to the owner only.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages portfolio projects. Only admins can create, update, and delete projects.
     * @path /projects/{projectId}
     * @allow (create, update, delete) if request.auth.token.email == "admin@example.com"
     * @deny (create, update, delete) if request.auth.token.email != "admin@example.com"
     * @principle Restricts project data access to administrators only.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages contact form submissions. Only admins can read and update submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (get, list, update) if request.auth.token.email == "admin@example.com"
     * @deny (get, list, update) if request.auth.token.email != "admin@example.com"
     * @principle Restricts contact submission access to administrators only.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if isAdmin();
      allow list: if false;

      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}