/**
 * @fileOverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization, ensuring data access is strictly controlled.
 * It uses an ownership model for user-specific data and restricts access to contact submissions.
 * Data validation is relaxed to allow rapid prototyping.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores individual user profiles. Only the authenticated user can read or write their own profile.
 * - `/portfolio/{portfolioId}`: Stores the main portfolio data.
 * - `/projects/{projectId}`: Stores individual portfolio projects.
 * - `/contactSubmissions/{submissionId}`: Stores contact form submissions.  These are readable and writable by authenticated users.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - `list` operations are generally allowed for user-owned data.
 * - Strict ownership is enforced for writing to user documents.
 * - Contact submissions are readable and writable by authenticated users (e.g., admins).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get) User with uid 'user123' can read their profile.
     * @allow (update) User with uid 'user123' can update their profile.
     * @allow (delete) User with uid 'user123' can delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with uid 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for main portfolio data.
     * @path /portfolio/{portfolioId}
     * @allow (get) Any user can read portfolio data.
     * @deny (create) No one can create a portfolio document.
     * @deny (update) No one can update a portfolio document.
     * @deny (delete) No one can delete a portfolio document.
     * @principle Restricts access to portfolio creation, updates and deletions.
     */
    match /portfolio/{portfolioId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get) Any user can read project data.
     * @deny (create) No one can create a project.
     * @deny (update) No one can update a project.
     * @deny (delete) No one can delete a project.
     * @principle Restricts access to project creation, updates and deletions.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (get) Authenticated users can read contact submissions.
     * @allow (list) Authenticated users can list contact submissions.
     * @allow (create) Any user can create a contact submission.
     * @allow (update) Authenticated users can update contact submissions.
     * @allow (delete) Authenticated users can delete contact submissions.
     * @principle Allows authenticated users to manage contact submissions.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if true;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}