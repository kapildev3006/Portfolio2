/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for projects.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /projects/{projectId}: Stores project data, publicly readable but writable only by the creator.
 * - /portfolio/{portfolioId}: Stores portfolio data, publicly readable but writable only by the creator.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Project listing is public.
 * - Only the creator of a project can modify or delete it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != userId
     * @deny (update) if request.auth.uid != userId
     * @deny (delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read project data, but only the creator can modify or delete it.
     * @path /projects/{projectId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.creatorId
     * @allow (update, delete) if resource.data.creatorId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.creatorId
     * @deny (update) if resource.data.creatorId != request.auth.uid
     * @deny (delete) if resource.data.creatorId != request.auth.uid
     * @principle Public read, owner-only writes for projects.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.creatorId;
      allow update: if resource.data.creatorId == request.auth.uid && resource != null;
      allow delete: if resource.data.creatorId == request.auth.uid && resource != null;
    }

        /**
         * @description Allows anyone to read portfolio data, but only the creator can modify or delete it.
         * @path /portfolio/{portfolioId}
         * @allow (get, list) if true
         * @allow (create) if request.auth.uid == request.resource.data.creatorId
         * @allow (update, delete) if resource.data.creatorId == request.auth.uid
         * @deny (create) if request.auth.uid != request.resource.data.creatorId
         * @deny (update) if resource.data.creatorId != request.auth.uid
         * @deny (delete) if resource.data.creatorId != request.auth.uid
         * @principle Public read, owner-only writes for portfolio.
         */
        match /portfolio/{portfolioId} {
          allow get: if true;
          allow list: if true;
          allow create: if request.auth.uid == request.resource.data.creatorId;
          allow update: if resource.data.creatorId == request.auth.uid && resource != null;
          allow delete: if resource.data.creatorId == request.auth.uid && resource != null;
        }
  }
}