/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * Users can only manage their own data, and sensitive operations are restricted to authorized roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owning user.
 * - /portfolio/{portfolioId}: Stores portfolio data, accessible to anyone.
 * - /projects/{projectId}: Stores project data, accessible to anyone.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions, accessible only to admins.
 *
 * Key Security Decisions:
 * - Public read access for portfolio and project data to showcase content.
 * - Contact submissions are private and only readable by admins.
 * - Strong ownership checks on user data to prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to compare against the resource's UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile with matching UID.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) User attempts to create a profile with a mismatched UID.
     * @deny (get, update, delete) Unauthorized user attempts to access another user's profile.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for portfolio documents.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) Anyone can read portfolio data.
     * @deny (create, update, delete) Only admins can create, update, or delete portfolio data. // TODO: Implement admin check once roles are defined
     * @principle Public read access with restricted write access.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project data.
     * @deny (create, update, delete) Only admins can create, update, or delete project data. // TODO: Implement admin check once roles are defined
     * @principle Public read access with restricted write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (create) Any signed in user can create a contact submission
     * @deny (get, list, update, delete) Only admins can read, update, or delete contact submissions. // TODO: Implement admin check once roles are defined
     * @principle Restricts access to contact submissions to admins.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}