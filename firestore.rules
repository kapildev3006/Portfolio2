/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership for private user data and allowing public read access for portfolio projects. Data shape validation is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; accessible only to the authenticated user with matching UID.
 * - /projects/{projectId}: Stores portfolio projects; publicly readable, but write access is restricted to authenticated users.
 * - /portfolio/{portfolioId}: Stores main portfolio data; accessible only to authenticated users.
 *
 * Key Security Decisions:
 * - Listing of users is explicitly denied.
 * - `projects` collection implements public read with authenticated-user-only writes based on an ownership field.
 *
 * Denormalization for Authorization:
 * The `projects` documents must contain a denormalized `authorId` field that matches the authenticated user's UID. This field is validated on `create` and enforced immutably on `update`.
 *
 * Structural Segregation:
 * Publicly readable `projects` are stored in a top-level collection separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile with matching document ID.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with document ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read user 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Stores main portfolio data document.
      * @path /portfolio/{portfolioId}
      * @allow (create) User with UID 'user123' can create a portfolio with matching document ID.
      * @allow (get) User with UID 'user123' can read their own portfolio.
      * @allow (update) User with UID 'user123' can update their own portfolio.
      * @allow (delete) User with UID 'user123' can delete their own portfolio.
      * @deny (create) User with UID 'user456' cannot create a portfolio with document ID 'user123'.
      * @deny (get) User with UID 'user456' cannot read user 'user123' portfolio.
      * @principle Enforces document ownership for all operations.
      */
    match /portfolio/{portfolioId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isExistingOwner(portfolioId);
        allow delete: if isExistingOwner(portfolioId);
    }

    /**
     * @description Stores individual portfolio projects.
     * @path /projects/{projectId}
     * @allow (get) Any user can read any project.
     * @allow (list) Any user can list projects.
     * @allow (create) User with UID 'user123' can create a project with authorId: 'user123'.
     * @allow (update) User with UID 'user123' can update a project with authorId: 'user123'.
     * @allow (delete) User with UID 'user123' can delete a project with authorId: 'user123'.
     * @deny (create) User with UID 'user456' cannot create a project with authorId: 'user123'.
     * @deny (update) User with UID 'user456' cannot update a project with authorId: 'user123'.
     * @principle Allows public read access with owner-only writes.
     */
    match /projects/{projectId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}