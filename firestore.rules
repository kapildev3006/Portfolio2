/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-centric security model. Each user has a dedicated document
 * under /users/{userId}, accessible only to themselves. Projects are publicly readable,
 * but only authenticated users can create, update, or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /projects/{projectId}: Stores portfolio projects, publicly readable, owner-only write.
 * - /portfolio/{portfolioId}: Stores the main portfolio data document, publicly readable, owner-only write.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Listing of users is disallowed to prevent enumeration.
 * - Projects are publicly readable to showcase portfolio items but have restricted write access.
 *
 * Denormalization for Authorization:
 * - Projects are required to have an `authorId` field to enforce owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific data. Only the owner can read and write their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the request is made by the user with matching ID.
     * @deny (get, create, update, delete, list) if the request is made by a different user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of all users

      // Allow self-creation
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to projects, but restricts write access to authenticated owners.
     * @path /projects/{projectId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and sets authorId to their own UID.
     * @allow (update, delete) if the user is authenticated and is the owner (authorId matches their UID).
     * @deny (create, update, delete) if the user is not the owner or not authenticated.
     * @principle Allows public read access with owner-only writes, enforcing ownership for modifications.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() ;
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;

    }

    /**
     * @description Grants public read access to portfolio, but restricts write access to authenticated owners.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and sets authorId to their own UID.
     * @allow (update, delete) if the user is authenticated and is the owner (authorId matches their UID).
     * @deny (create, update, delete) if the user is not the owner or not authenticated.
     */
     match /portfolio/{portfolioId} {
          function isSignedIn() {
            return request.auth != null;
          }

          allow get: if true;
          allow list: if true;
    
          allow create: if isSignedIn();
          allow update: if isSignedIn() && resource != null;
          allow delete: if isSignedIn() && resource != null;

        }
  }
}