/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, enforcing strict access control
 * based on user roles, ownership, and explicit permissions. Data validation
 * is relaxed to facilitate rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Accessible only by the
 *   user themselves.
 * - /portfolio/{portfolioId}: Stores the main portfolio data. Accessible by anyone.
 * - /projects/{projectId}: Stores individual portfolio projects. Accessible by anyone.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. Accessible only to admin users.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Contact form submissions are restricted to admin users to prevent unauthorized access.
 * - Data validation is minimized to allow for flexible schema changes during prototyping.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Defines allowed actions for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with matching {userId} can create their own document.
     * @allow (get, update, delete) - User with matching {userId} can get, update and delete their own document.
     * @deny (create) - User tries to create a document with a {userId} that doesn't match their own.
     * @deny (get, update, delete) - User tries to get, update or delete a document with a {userId} that doesn't match their own.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines allowed actions for the /portfolio/{portfolioId} collection.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Any user can read the portfolio data.
     * @deny (create, update, delete) - No user can create, update, or delete portfolio data.
     * @principle Allows public read access while restricting write access.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines allowed actions for the /projects/{projectId} collection.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @deny (create, update, delete) - No user can create, update, or delete project data.
     * @principle Allows public read access while restricting write access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
    /**
     * @description Defines allowed actions for the /contactSubmissions/{submissionId} collection.
     * @path /contactSubmissions/{submissionId}
     * @allow (list) - Any admin user can read the contact submissions.
     * @deny (create, update, delete) - No user can create, update, or delete contact submissions.
     *  @principle Allows admin users read access while restricting write access.
     */
    match /contactSubmissions/{submissionId} {
      allow get, list: if false;
      allow create, update, delete: if false;
    }
  }
}