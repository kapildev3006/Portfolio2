/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model for the portfolio
 * data, a user-ownership model for user data, and public read access with owner-only
 * writes for projects.  Contact Submissions will be writeable by anyone, but only
 * accessible by admins.
 *
 * Data Structure:
 * - /portfolio/main: Contains the main portfolio data (about, hero, etc.).  Only admins can modify.
 * - /users/{userId}: Contains user profile information, accessible only to the user themselves.
 * - /projects/{projectId}: Contains portfolio projects, publicly readable but only editable by the project owner.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. Only admins can view/manage.
 *
 * Key Security Decisions:
 * - Only authenticated users can access the application.
 * - Users can only read and write their own profile data.
 * - Portfolio data is only editable by authenticated users (admins)
 * - Projects are publicly readable but only editable by their owners.
 * - Contact form submissions can be created by anyone, but only read/modified by admins.
 * - Listing of users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Admin user email. Only this account can edit the site.
     */
    function isAdmin() {
        return request.auth.uid == 't1YmkR5hmqOWK8mSI0QWj60zG3w1';
    }

    /**
     * @description Rule set for the main portfolio document.
     * @path /portfolio/main
     * @allow (update) - Authenticated admin user can update the portfolio data.
     * @deny (update) - Non-authenticated user attempts to update the portfolio data.
     * @principle Enforces admin-only access for portfolio data modifications.
     */
    match /portfolio/main {
      allow get: if true;
      allow list: if false;

      allow create: if false;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if false;
    }

    /**
     * @description Rule set for user documents.
     * @path /users/{userId}
     * @allow (get, list) - The user can read their own profile.
     * @allow (create) - The user can create their own profile, matching the userId.
     * @allow (update, delete) - The user can update/delete their own profile.
     * @deny (get, list, create, update, delete) - Any other user attempts to access this data.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for project documents.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read the project data.
     * @allow (create) - Only authenticated users can create a project.
     * @allow (update, delete) - Only the project owner can update/delete it.
     * @deny (create, update, delete) - Operations fail if ownership is not validated.
     * @principle Public read with owner-only writes for project data.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rule set for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (create) - Any user can submit a contact form.
     * @allow (get, list, update, delete) - Only admins can manage submissions.
     * @principle Allows public submissions but restricts management to admins.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();

      allow create: if true;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}