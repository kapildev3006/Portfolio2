/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and portfolios.
 * Projects are publicly readable but only editable by their owner.
 * Contact submissions are writeable by anyone, but only readable/manageable by an admin.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /portfolio/{portfolioId}: Stores portfolio information, accessible only to the user themselves.
 * - /projects/{projectId}: Stores portfolio projects. Publicly readable, owner-writable.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions. Writeable by anyone, readable by admin only.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and portfolio data.
 * - Listing of users is disallowed.
 * - Projects are publicly readable, enabling wide showcasing, but only the owner can create, update, or delete them.
 * - Contact submissions are publicly creatable, facilitating easy communication, but only admins can read or manage them.
 *
 * Denormalization for Authorization:
 *  The 'projects' documents do not have an explicit 'ownerId' field in the schema. To enforce owner-only writes, we need to verify the user ID from `request.auth.uid` during creation and updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the document's owner ID.
     * @return {bool} True if the user is signed in, the UID matches, and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user portfolios.
     * @path /portfolio/{portfolioId}
     * @allow (create) User with UID 'user123' can create their own portfolio.
     * @allow (get) User with UID 'user123' can read their own portfolio.
     * @allow (update) User with UID 'user123' can update their own portfolio.
     * @allow (delete) User with UID 'user123' can delete their own portfolio.
     * @deny (create) User with UID 'user456' cannot create a portfolio with ID 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /portfolio/{portfolioId} {
      allow get: if isOwner(portfolioId);
      allow list: if false;
      allow create: if isOwner(portfolioId);
      allow update: if isExistingOwner(portfolioId);
      allow delete: if isExistingOwner(portfolioId);
    }

    /**
     * @description Security rules for portfolio projects.
     * @path /projects/{projectId}
     * @allow (get) Any user can read a project.
     * @allow (list) Any user can list projects.
     * @allow (create) User with UID 'user123' can create a project.
     * @allow (update) User with UID 'user123' can update a project they own.
     * @allow (delete) User with UID 'user123' can delete a project they own.
     * @deny (create) User with UID 'user123' cannot create a project without author ID.
     * @deny (update) User with UID 'user456' cannot update a project owned by 'user123'.
     * @principle Publicly readable, owner-writable.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

      /**
       * @description Security rules for contact form submissions.
       * @path /contactSubmissions/{submissionId}
       * @allow (create) Any user can submit a contact form.
       * @deny (get) Non-admin users cannot read contact form submissions.
       * @deny (list) Non-admin users cannot list contact form submissions.
       * @deny (update) Non-admin users cannot update contact form submissions.
       * @deny (delete) Non-admin users cannot delete contact form submissions.
       * @principle Publicly writable, admin-only readable.
       */
      match /contactSubmissions/{submissionId} {
          allow create: if true;
          allow get: if false;
          allow list: if false;
          allow update: if false;
          allow delete: if false;
      }
  }
}