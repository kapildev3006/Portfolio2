/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of owner-based access for user-specific data and public read access with owner-only writes for shared content.
 * Administrative access is not defined so it is not supported.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /projects/{projectId}: Stores portfolio projects, publicly readable but only editable by the owner.
 * - /portfolio/{portfolioId}: Stores the main portfolio data, publicly readable but only editable by the owner.
 * - /contactSubmissions/{submissionId}: Stores contact form submissions; create is public, but listing, getting, updating, and deleting are disallowed.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Read-only collections are handled using `allow get, list: if true;`.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *  N/A - Currently not needed, but important to keep in mind as we iterate on these rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource, verifying the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can only get, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update, delete) - A user cannot update or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for projects.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @allow (create) - Only the authenticated user can create a project with their user ID as the authorId.
     * @allow (update, delete) - Only the project author can update or delete the project.
     * @deny (create) - Prevents creating projects where the authorId doesn't match the authenticated user.
     * @deny (update, delete) - Prevents non-authors from updating or deleting projects.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Defines access rules for main portfolio data.
     * @path /portfolio/{portfolioId}
     * @allow (get, list) - Any user can read main portfolio data.
     * @allow (create) - Only the authenticated user can create a portfolio with their user ID as the authorId.
     * @allow (update, delete) - Only the portfolio author can update or delete the portfolio.
     * @deny (create) - Prevents creating portfolios where the authorId doesn't match the authenticated user.
     * @deny (update, delete) - Prevents non-authors from updating or deleting portfolios.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /portfolio/{portfolioId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Defines access rules for contact form submissions.
     * @path /contactSubmissions/{submissionId}
     * @allow (create) - Allows anyone to submit the contact form.
     * @deny (get, list, update, delete) - No one can list, get, update or delete submissions (admin-only).
     * @principle Restricts access to contact form submissions after creation.
     */
    match /contactSubmissions/{submissionId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}