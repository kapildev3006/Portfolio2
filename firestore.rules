/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and allows public read access to portfolio projects.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, only accessible by the user themselves.
 * - /portfolio/{portfolioId}: Stores main portfolio data, with access restricted to the owner.
 * - /projects/{projectId}: Stores individual portfolio projects, publicly readable, but only editable by the owner.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Portfolio projects are publicly readable to showcase user work.
 * - Only authenticated users can create, update, or delete portfolio projects.
 * - To simplify rules and improve performance, the owner of a project is implicitly the user who created the document. There isn't a need to denormalize this information on the document.
 *
 * Denormalization for Authorization:
 *  - The project collection requires that all projects have an authorId matching the authenticated user.
 *
 * Structural Segregation:
 * - Private user data is stored under /users/{userId}, while public portfolio data is stored in the top-level /projects collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their own user document.
     * @allow (get, list, update, delete) - An authenticated user can only access their own user document.
     * @deny (create) - An unauthenticated user cannot create user documents.
     * @deny (get, list, update, delete) - An authenticated user cannot access other user documents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Grants access to portfolio documents.
      * @path /portfolio/{portfolioId}
      * @allow (get, list) - Any authenticated user can view the portfolio document.
      * @allow (create, update, delete) - Only the owner can create, update, or delete the portfolio document.
      * @deny (create, update, delete) - Other users cannot modify the portfolio document.
      * @principle Enforces document ownership for writes, allows public reads.
      */
    match /portfolio/{portfolioId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(portfolioId) {
        return request.auth.uid == portfolioId;
      }

      function isExistingOwner(portfolioId) {
        return isOwner(portfolioId) && resource != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants public read access to projects and restricts write access to authenticated owners.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can view projects.
     * @allow (create) - Only an authenticated user can create a project with their UID as the authorId.
     * @allow (update, delete) - Only the authenticated owner of the project can modify or delete it.
     * @deny (create) - An unauthenticated user cannot create projects.
     * @deny (update, delete) - Users cannot modify or delete projects they do not own.
     * @principle Allows public reads, enforces document ownership for writes, and validates relational integrity on create.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}